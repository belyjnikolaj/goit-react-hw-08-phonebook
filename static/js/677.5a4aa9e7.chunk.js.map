{"version":3,"file":"static/js/677.5a4aa9e7.chunk.js","mappings":"gOAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAMvBC,GAAyBC,EAAAA,EAAAA,IAClC,CAACP,EAHuB,SAAAC,GAAK,OAAIA,EAAMO,OAAOA,MAAjB,IAI7B,SAACN,EAAUM,GACP,OAAON,EAASM,QAAO,SAAAC,GAAE,OACrBA,EAAGC,KAAKC,cAAcC,SAASJ,EAAOG,cADjB,GAG5B,ICfL,EAAuB,0BAAvB,EAAgE,kCAAhE,EAA2G,4BAA3G,EAA+I,2BAA/I,EAAwL,iC,kBCuDxL,EAnDoB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,MACXZ,GAAWa,EAAAA,EAAAA,IAAYf,GAuB3B,OACI,kBAAMgB,SAtBS,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACbC,EAAa,CACjBX,KAAMS,EAAKG,SAASZ,KAAKa,MACzBC,OAAQL,EAAKG,SAASE,OAAOD,OAGPrB,EAASuB,MAC/B,SAAAC,GAAO,OAAIA,EAAQhB,KAAKC,gBAAkBU,EAAWX,KAAKC,aAAnD,IAIPgB,MAAM,GAAD,OAAIN,EAAWX,KAAf,6BAELG,GAASe,EAAAA,EAAAA,IAAWP,IAGtBF,EAAKU,OACN,EAGmCC,UAAWC,EAAzC,WACA,eAAID,UAAWC,EAAf,SAAoC,UACpC,kBACED,UAAWC,EACXC,KAAK,OACLtB,KAAK,OACLuB,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,KAEV,eAAIL,UAAS,UAAKC,EAAL,YAA4BA,GAAzC,SAA0D,YAC1D,kBACED,UAAWC,EACXC,KAAK,MACLtB,KAAK,SACLuB,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,KAGN,mBAAQL,UAAWC,EAAiBC,KAAK,SAAzC,SAAkD,kBAG3D,ECrDH,EAAgC,+BAAhC,EAA4E,4BCwB5E,EApBgB,SAAC,GAAiB,IAAfN,EAAc,EAAdA,QACTb,GAAWC,EAAAA,EAAAA,MACnB,OACE,gBAAIgB,UAAWC,EAAf,UACKL,EAAQhB,KAAK,KAAGgB,EAAQF,QACzB,mBACIQ,KAAK,SACLF,UAAWC,EACX,aAAW,QACXK,QAAS,kBAAMvB,GAASwB,EAAAA,EAAAA,IAAcX,EAAQY,IAArC,EAJb,SAKC,aAPqCZ,EAAQY,GAYrD,ECID,EApBoB,WAClB,IAAMC,GAAmBxB,EAAAA,EAAAA,IAAYT,GAEnC,OACE,8BAC+B,IAA5BiC,EAAiBC,QAChB,uBAAG,2BAEH,wBACGD,EAAiBE,KAAI,SAACf,GAAD,OAChB,SAAC,EAAD,CAASA,QAAYA,GAAeA,EAAQY,GAD5B,OAOjC,E,UCXc,SAASI,IACtB,IAAM7B,GAAWC,EAAAA,EAAAA,MACXT,GAAYU,EAAAA,EAAAA,IAAYX,GAM9B,OAJAuC,EAAAA,EAAAA,YAAU,WACR9B,GAAS+B,EAAAA,EAAAA,MACV,GAAE,CAAC/B,KAGF,iCACE,SAACgC,EAAA,EAAD,WACE,2BAAO,kBAET,SAAC,EAAD,KACA,yBAAMxC,IAAa,SAACyC,EAAA,EAAD,OACnB,SAAC,EAAD,MAGL,C","sources":["redux/selectors.js","webpack://react-homework-template/./src/components/contactForm/ContactForm.module.css?fd94","components/contactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/contact/Contact.module.css?ecf7","components/contact/Contact.jsx","components/contactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        return contacts.filter(el =>\n            el.name.toLowerCase().includes(filter.toLowerCase())\n        );\n    }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__ttXmo\",\"input__title\":\"ContactForm_input__title__log9r\",\"number\":\"ContactForm_number__w9S8D\",\"input\":\"ContactForm_input__e2U+9\",\"button__add\":\"ContactForm_button__add__-Ogv9\"};","import css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nconst ContactForm = () => {  \n  const dispatch = useDispatch();  \n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const newContact = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n\n    const existingContact = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    if (existingContact) {\n      alert(`${newContact.name} is already in contacts!`);\n    } else {\n      dispatch(addContact(newContact)); \n    }\n    \n    form.reset();\n  };\n \n    return (\n        <form onSubmit={handleSubmit} className={css.form}>\n        <h2 className={css['input__title']}>Name</h2>\n        <input\n          className={css['input']}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          />\n        <h2 className={`${css['input__title']} ${css['number']}`}>Number</h2>\n        <input\n          className={css['input']}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n            <button className={css.button__add} type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"contact__item\":\"Contact_contact__item__FcuyQ\",\"btn__close\":\"Contact_btn__close__h4d+Z\"};","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport css from './Contact.module.css';\nimport { deleteContact } from 'redux/operations';\n\nconst Contact = ({ contact }) => {\n    const dispatch = useDispatch();  \n  return (\n    <li className={css['contact__item']} key={contact.id}>\n        {contact.name}: {contact.number}\n        <button\n            type=\"button\"\n            className={css[\"btn__close\"]}\n            aria-label=\"Close\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n        >\n        Delete\n        </button>\n    </li>\n  )\n}\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,  \n};\n\nexport default Contact;","import Contact from 'components/contact';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nconst ContactList = () => {    \n  const filteredContacts = useSelector(selectFilteredContacts);\n  \n    return (\n      <>\n        {filteredContacts.length === 0 ? (\n          <p>No contacts available</p>\n        ) : (\n          <ul>\n            {filteredContacts.map((contact) => (\n                  <Contact contact = { contact } key={contact.id} />                \n              ))}\n          </ul>\n        )}\n      </>\n    );\n}\n\n\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectIsLoading } from 'redux/selectors';\nimport ContactForm from 'components/contactForm';\nimport ContactList from 'components/contactList';\nimport { fetchContacts } from 'redux/operations';\nimport Loader from 'components/loader/Loader';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && <Loader/>}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilteredContacts","createSelector","filter","el","name","toLowerCase","includes","dispatch","useDispatch","useSelector","onSubmit","event","preventDefault","form","target","newContact","elements","value","number","some","contact","alert","addContact","reset","className","css","type","pattern","title","required","onClick","deleteContact","id","filteredContacts","length","map","Tasks","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}